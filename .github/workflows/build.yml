name: CI
# Config env / BUILD_BRANCH & ENV receive from webhook
env:
  FLUTTER_VERSION: "stable"
  FLUTTER_SDK: "2.10.0"
  BUILD_DIR: "./mobile_app"
  BUILD_BRANCH: "master"
  ENV: "dev"
  MESSAGE: ""
  VER: ""
  
on:
  repository_dispatch:
    types: 
        - webhook
  workflow_dispatch:
jobs:
  build_apk:
    name: APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
#       ${{ github.event.client_payload.branch }}
#       ${{ github.event.client_payload.env }}
      - name: Set environment
        if: ${{ github.event.action == 'webhook' }}
        run: |
          echo "BUILD_BRANCH=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV
          echo "ENV=${{ github.event.client_payload.env }}" >> $GITHUB_ENV
          echo "MESSAGE=${{ github.event.client_payload.message }}" >> $GITHUB_ENV
      - name: Double check branch-env
        run: echo "Current build on ${{env.BUILD_BRANCH}} ${{env.ENV}}"
      
      # Authentication
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}
      - name: Setting action
        run: echo "machine gitlab.com login ${{ secrets.TOKEN_NAME }} password ${{ secrets.TOKEN_KEY }}" > ~/.netrc
      
      # Fetch source code
      - name: Clone
        run: git clone -b ${{ env.BUILD_BRANCH }} --single-branch ${{ secrets.REPO }} ${{ env.BUILD_DIR }}
      # Get version
      - name: Get versions
        run: echo "VER=$( sed '18!d' ${{ env.BUILD_DIR }}/pubspec.yaml)" >> $GITHUB_ENV

      # Install flutter sdk
      - name: Installing Flutter
        uses: britannio/action-install-flutter@v1.0
        with:
          version: ${{ env.FLUTTER_SDK }}
      - name: Flutter doctor
        run: flutter doctor
        
      # Run flutter
      - name: Installing dependencies
        run: cd ${{ env.BUILD_DIR }} ; flutter pub get
      - name: Generate code
        run: cd ${{ env.BUILD_DIR }} ; flutter pub run build_runner build
      - name: Build APK
        run: cd ${{ env.BUILD_DIR }} ; flutter build apk --dart-define=flavor=${{ env.ENV }} --flavor ${{ env.ENV }} --release
        
      # Deploy
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BUILD_DIR }}/build/app/outputs/flutter-apk/app-${{ env.ENV }}-release.apk
          tag: ${{ env.BUILD_BRANCH }}
          overwrite: true
          file_glob: true
          body: Build for branch
        
      # Message notify
      - name: Gen URL
        run: echo "URL=https://github.com/hautvfami/vhbuilder/releases/download/${{ env.BUILD_BRANCH }}/app-${{ env.ENV }}-release.apk" >> $GITHUB_ENV
      - name: Gen QR
        run: wget -O qr.png https://api.qrserver.com/v1/create-qr-code/?data=${{env.URL}}&size=100x100
      - name: Push to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.CHAT_ID }}
          token: ${{ secrets.BOT_TOKEN }}
          format: markdown
          message: |
            Build success
            env: ${{env.ENV}} - branch: ${{ env.BUILD_BRANCH}}
            ${{ env.MESSAGE }}
            
            [Install APK](${{ env.URL }}) - ${{ env.VER }}
            From VH with love :coffee:
          photo: qr.png
          
      - name: Push fail
        if: ${{ failure() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.CHAT_ID }}
          token: ${{ secrets.BOT_TOKEN }}
          message: |
            Build failure
            ${{ env.MESSAGE }}

            [View Log](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})

#       - name: Deploy to artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: apk
#           file_glob: true
#           path: ${{ env.BUILD_DIR }}/build/app/outputs/flutter-apk/app-dev-release.apk
#           retention-days: 5

      # This step reads a file from repo and use it for body of the release
      # This works on any self-hosted runner OS
#       - name: Read RELEASE.md and use it as a body of new release
#         id: read_release
#         shell: bash
#         run: |
#           r=$(cat ./RELEASE.md)                       # <--- Read RELEASE.md (Provide correct path as per your repo)
#           r="${r//'%'/'%25'}"                               # Multiline escape sequences for %
#           r="${r//$'\n'/'%0A'}"                             # Multiline escape sequences for '\n'
#           r="${r//$'\r'/'%0D'}"                             # Multiline escape sequences for '\r'
#           echo "::set-output name=RELEASE_BODY::$r"         # <--- Set environment variable
#       - name: Upload binaries to release
#         uses: svenstaro/upload-release-action@v2
#         with:
#           repo_token: ${{ secrets.GITHUB_TOKEN }}
#           file: ${{ env.BUILD_DIR }}/build/app/outputs/flutter-apk/app-release.apk
#           tag: ${{ github.ref }}
#           overwrite: true
#           file_glob: true
#           body: |
#             ${{ steps.read_release.outputs.RELEASE_BODY }}

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
